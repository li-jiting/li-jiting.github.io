{"title":"人口密度分析","uid":"ff52f4ae253aef32f50e414d6d2d634b","slug":"美国各州人口密度分析","date":"2023-09-09T04:17:53.000Z","updated":"2023-09-14T14:13:39.786Z","comments":true,"path":"api/articles/美国各州人口密度分析.json","keywords":null,"cover":null,"content":"<h1 id=\"美国各州人口密度分析\"><a href=\"#美国各州人口密度分析\" class=\"headerlink\" title=\"美国各州人口密度分析\"></a>美国各州人口密度分析</h1><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">import numpy as np\nimport pandas as pd</code></pre>\n\n<h3 id=\"首先导入文件，并查看数据样本\"><a href=\"#首先导入文件，并查看数据样本\" class=\"headerlink\" title=\"首先导入文件，并查看数据样本\"></a>首先导入文件，并查看数据样本</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 州的全称和州名称简写对应关系表\nabb &#x3D; pd.read_csv(&#39;.&#x2F;data&#x2F;state-abbrevs.csv&#39;)</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 州的全称和面积表\nareas &#x3D; pd.read_csv(&#39;.&#x2F;data&#x2F;state-areas.csv&#39;)</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 州名称的简写和面积表，包括年龄和年份信息\npopulation &#x3D; pd.read_csv(&#39;.&#x2F;data&#x2F;state-population.csv&#39;)</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">display(abb.head(), areas.head(), population.head())</code></pre>\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th &#123;\n    vertical-align: top;\n&#125;\n\n.dataframe thead th &#123;\n    text-align: right;\n&#125;\n</code></pre>\n<p></style></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>state</th>\n      <th>abbreviation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Alabama</td>\n      <td>AL</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Alaska</td>\n      <td>AK</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Arizona</td>\n      <td>AZ</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Arkansas</td>\n      <td>AR</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>California</td>\n      <td>CA</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th &#123;\n    vertical-align: top;\n&#125;\n\n.dataframe thead th &#123;\n    text-align: right;\n&#125;\n</code></pre>\n<p></style></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>state</th>\n      <th>area (sq. mi)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Alabama</td>\n      <td>52423</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Alaska</td>\n      <td>656425</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Arizona</td>\n      <td>114006</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Arkansas</td>\n      <td>53182</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>California</td>\n      <td>163707</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th &#123;\n    vertical-align: top;\n&#125;\n\n.dataframe thead th &#123;\n    text-align: right;\n&#125;\n</code></pre>\n<p></style></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>state/region</th>\n      <th>ages</th>\n      <th>year</th>\n      <th>population</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>AL</td>\n      <td>under18</td>\n      <td>2012</td>\n      <td>1117489.0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>AL</td>\n      <td>total</td>\n      <td>2012</td>\n      <td>4817528.0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>AL</td>\n      <td>under18</td>\n      <td>2010</td>\n      <td>1130966.0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>AL</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>4785570.0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>AL</td>\n      <td>under18</td>\n      <td>2011</td>\n      <td>1125763.0</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n<h3 id=\"合并pop与abbrevs两个DataFrame，分别依据state-region列和abbreviation列来合并。\"><a href=\"#合并pop与abbrevs两个DataFrame，分别依据state-region列和abbreviation列来合并。\" class=\"headerlink\" title=\"合并pop与abbrevs两个DataFrame，分别依据state&#x2F;region列和abbreviation列来合并。\"></a>合并pop与abbrevs两个DataFrame，分别依据state&#x2F;region列和abbreviation列来合并。</h3><p>为了保留所有信息，使用外合并。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 根据某一列或几列来合并\n# 默认合并的规则是查找字段名称相同的列\n# 合并的列在内容上，要存在一对一、一对多、多对多的关系\npd.merge(left&#x3D;population, right&#x3D;abb, left_on&#x3D;&#39;state&#x2F;region&#39;, right_on&#x3D;&#39;abbreviation&#39;, how&#x3D;&#39;inner&#39;)</code></pre>\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th &#123;\n    vertical-align: top;\n&#125;\n\n.dataframe thead th &#123;\n    text-align: right;\n&#125;\n</code></pre>\n<p></style></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>state/region</th>\n      <th>ages</th>\n      <th>year</th>\n      <th>population</th>\n      <th>state</th>\n      <th>abbreviation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>AL</td>\n      <td>under18</td>\n      <td>2012</td>\n      <td>1117489.0</td>\n      <td>Alabama</td>\n      <td>AL</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>AL</td>\n      <td>total</td>\n      <td>2012</td>\n      <td>4817528.0</td>\n      <td>Alabama</td>\n      <td>AL</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>AL</td>\n      <td>under18</td>\n      <td>2010</td>\n      <td>1130966.0</td>\n      <td>Alabama</td>\n      <td>AL</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>AL</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>4785570.0</td>\n      <td>Alabama</td>\n      <td>AL</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>AL</td>\n      <td>under18</td>\n      <td>2011</td>\n      <td>1125763.0</td>\n      <td>Alabama</td>\n      <td>AL</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2443</th>\n      <td>WY</td>\n      <td>under18</td>\n      <td>1993</td>\n      <td>137458.0</td>\n      <td>Wyoming</td>\n      <td>WY</td>\n    </tr>\n    <tr>\n      <th>2444</th>\n      <td>WY</td>\n      <td>total</td>\n      <td>1991</td>\n      <td>459260.0</td>\n      <td>Wyoming</td>\n      <td>WY</td>\n    </tr>\n    <tr>\n      <th>2445</th>\n      <td>WY</td>\n      <td>under18</td>\n      <td>1991</td>\n      <td>136720.0</td>\n      <td>Wyoming</td>\n      <td>WY</td>\n    </tr>\n    <tr>\n      <th>2446</th>\n      <td>WY</td>\n      <td>under18</td>\n      <td>1990</td>\n      <td>136078.0</td>\n      <td>Wyoming</td>\n      <td>WY</td>\n    </tr>\n    <tr>\n      <th>2447</th>\n      <td>WY</td>\n      <td>total</td>\n      <td>1990</td>\n      <td>453690.0</td>\n      <td>Wyoming</td>\n      <td>WY</td>\n    </tr>\n  </tbody>\n</table>\n<p>2448 rows × 6 columns</p>\n</div>\n\n\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">abb.abbreviation.unique()</code></pre>\n\n\n\n\n<pre><code>array([&#39;AL&#39;, &#39;AK&#39;, &#39;AZ&#39;, &#39;AR&#39;, &#39;CA&#39;, &#39;CO&#39;, &#39;CT&#39;, &#39;DE&#39;, &#39;DC&#39;, &#39;FL&#39;, &#39;GA&#39;,\n       &#39;HI&#39;, &#39;ID&#39;, &#39;IL&#39;, &#39;IN&#39;, &#39;IA&#39;, &#39;KS&#39;, &#39;KY&#39;, &#39;LA&#39;, &#39;ME&#39;, &#39;MT&#39;, &#39;NE&#39;,\n       &#39;NV&#39;, &#39;NH&#39;, &#39;NJ&#39;, &#39;NM&#39;, &#39;NY&#39;, &#39;NC&#39;, &#39;ND&#39;, &#39;OH&#39;, &#39;OK&#39;, &#39;OR&#39;, &#39;MD&#39;,\n       &#39;MA&#39;, &#39;MI&#39;, &#39;MN&#39;, &#39;MS&#39;, &#39;MO&#39;, &#39;PA&#39;, &#39;RI&#39;, &#39;SC&#39;, &#39;SD&#39;, &#39;TN&#39;, &#39;TX&#39;,\n       &#39;UT&#39;, &#39;VT&#39;, &#39;VA&#39;, &#39;WA&#39;, &#39;WV&#39;, &#39;WI&#39;, &#39;WY&#39;], dtype=object)\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">population[&#39;state&#x2F;region&#39;].unique()</code></pre>\n\n\n\n\n<pre><code>array([&#39;AL&#39;, &#39;AK&#39;, &#39;AZ&#39;, &#39;AR&#39;, &#39;CA&#39;, &#39;CO&#39;, &#39;CT&#39;, &#39;DE&#39;, &#39;DC&#39;, &#39;FL&#39;, &#39;GA&#39;,\n       &#39;HI&#39;, &#39;ID&#39;, &#39;IL&#39;, &#39;IN&#39;, &#39;IA&#39;, &#39;KS&#39;, &#39;KY&#39;, &#39;LA&#39;, &#39;ME&#39;, &#39;MD&#39;, &#39;MA&#39;,\n       &#39;MI&#39;, &#39;MN&#39;, &#39;MS&#39;, &#39;MO&#39;, &#39;MT&#39;, &#39;NE&#39;, &#39;NV&#39;, &#39;NH&#39;, &#39;NJ&#39;, &#39;NM&#39;, &#39;NY&#39;,\n       &#39;NC&#39;, &#39;ND&#39;, &#39;OH&#39;, &#39;OK&#39;, &#39;OR&#39;, &#39;PA&#39;, &#39;RI&#39;, &#39;SC&#39;, &#39;SD&#39;, &#39;TN&#39;, &#39;TX&#39;,\n       &#39;UT&#39;, &#39;VT&#39;, &#39;VA&#39;, &#39;WA&#39;, &#39;WV&#39;, &#39;WI&#39;, &#39;WY&#39;, &#39;PR&#39;, &#39;USA&#39;],\n      dtype=object)\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># PR USA这两个简称，在abb表中，是不存在的\nset(population[&#39;state&#x2F;region&#39;].unique()) - set(abb.abbreviation.unique())  </code></pre>\n\n\n\n\n<pre><code>&#123;&#39;PR&#39;, &#39;USA&#39;&#125;\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">temp &#x3D; pd.merge(left&#x3D;population, right&#x3D;abb, left_on&#x3D;&#39;state&#x2F;region&#39;, right_on&#x3D;&#39;abbreviation&#39;, how&#x3D;&#39;outer&#39;)</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># USA不是一个州，是美国的全称\ntemp.loc[temp[&#39;state&#x2F;region&#39;] &#x3D;&#x3D; &#39;USA&#39;]</code></pre>\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th &#123;\n    vertical-align: top;\n&#125;\n\n.dataframe thead th &#123;\n    text-align: right;\n&#125;\n</code></pre>\n<p></style></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>state/region</th>\n      <th>ages</th>\n      <th>year</th>\n      <th>population</th>\n      <th>state</th>\n      <th>abbreviation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2496</th>\n      <td>USA</td>\n      <td>under18</td>\n      <td>1990</td>\n      <td>64218512.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2497</th>\n      <td>USA</td>\n      <td>total</td>\n      <td>1990</td>\n      <td>249622814.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2498</th>\n      <td>USA</td>\n      <td>total</td>\n      <td>1991</td>\n      <td>252980942.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2499</th>\n      <td>USA</td>\n      <td>under18</td>\n      <td>1991</td>\n      <td>65313018.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2500</th>\n      <td>USA</td>\n      <td>under18</td>\n      <td>1992</td>\n      <td>66509177.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2501</th>\n      <td>USA</td>\n      <td>total</td>\n      <td>1992</td>\n      <td>256514231.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2502</th>\n      <td>USA</td>\n      <td>total</td>\n      <td>1993</td>\n      <td>259918595.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2503</th>\n      <td>USA</td>\n      <td>under18</td>\n      <td>1993</td>\n      <td>67594938.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2504</th>\n      <td>USA</td>\n      <td>under18</td>\n      <td>1994</td>\n      <td>68640936.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2505</th>\n      <td>USA</td>\n      <td>total</td>\n      <td>1994</td>\n      <td>263125826.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2506</th>\n      <td>USA</td>\n      <td>under18</td>\n      <td>1995</td>\n      <td>69473140.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2507</th>\n      <td>USA</td>\n      <td>under18</td>\n      <td>1996</td>\n      <td>70233512.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2508</th>\n      <td>USA</td>\n      <td>total</td>\n      <td>1995</td>\n      <td>266278403.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2509</th>\n      <td>USA</td>\n      <td>total</td>\n      <td>1996</td>\n      <td>269394291.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2510</th>\n      <td>USA</td>\n      <td>total</td>\n      <td>1997</td>\n      <td>272646932.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2511</th>\n      <td>USA</td>\n      <td>under18</td>\n      <td>1997</td>\n      <td>70920738.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2512</th>\n      <td>USA</td>\n      <td>under18</td>\n      <td>1998</td>\n      <td>71431406.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2513</th>\n      <td>USA</td>\n      <td>total</td>\n      <td>1998</td>\n      <td>275854116.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2514</th>\n      <td>USA</td>\n      <td>under18</td>\n      <td>1999</td>\n      <td>71946051.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2515</th>\n      <td>USA</td>\n      <td>total</td>\n      <td>2000</td>\n      <td>282162411.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2516</th>\n      <td>USA</td>\n      <td>under18</td>\n      <td>2000</td>\n      <td>72376189.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2517</th>\n      <td>USA</td>\n      <td>total</td>\n      <td>1999</td>\n      <td>279040181.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2518</th>\n      <td>USA</td>\n      <td>total</td>\n      <td>2001</td>\n      <td>284968955.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2519</th>\n      <td>USA</td>\n      <td>under18</td>\n      <td>2001</td>\n      <td>72671175.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2520</th>\n      <td>USA</td>\n      <td>total</td>\n      <td>2002</td>\n      <td>287625193.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2521</th>\n      <td>USA</td>\n      <td>under18</td>\n      <td>2002</td>\n      <td>72936457.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2522</th>\n      <td>USA</td>\n      <td>total</td>\n      <td>2003</td>\n      <td>290107933.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2523</th>\n      <td>USA</td>\n      <td>under18</td>\n      <td>2003</td>\n      <td>73100758.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2524</th>\n      <td>USA</td>\n      <td>total</td>\n      <td>2004</td>\n      <td>292805298.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2525</th>\n      <td>USA</td>\n      <td>under18</td>\n      <td>2004</td>\n      <td>73297735.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2526</th>\n      <td>USA</td>\n      <td>total</td>\n      <td>2005</td>\n      <td>295516599.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2527</th>\n      <td>USA</td>\n      <td>under18</td>\n      <td>2005</td>\n      <td>73523669.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2528</th>\n      <td>USA</td>\n      <td>total</td>\n      <td>2006</td>\n      <td>298379912.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2529</th>\n      <td>USA</td>\n      <td>under18</td>\n      <td>2006</td>\n      <td>73757714.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2530</th>\n      <td>USA</td>\n      <td>total</td>\n      <td>2007</td>\n      <td>301231207.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2531</th>\n      <td>USA</td>\n      <td>under18</td>\n      <td>2007</td>\n      <td>74019405.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2532</th>\n      <td>USA</td>\n      <td>total</td>\n      <td>2008</td>\n      <td>304093966.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2533</th>\n      <td>USA</td>\n      <td>under18</td>\n      <td>2008</td>\n      <td>74104602.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2534</th>\n      <td>USA</td>\n      <td>under18</td>\n      <td>2013</td>\n      <td>73585872.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2535</th>\n      <td>USA</td>\n      <td>total</td>\n      <td>2013</td>\n      <td>316128839.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2536</th>\n      <td>USA</td>\n      <td>total</td>\n      <td>2009</td>\n      <td>306771529.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2537</th>\n      <td>USA</td>\n      <td>under18</td>\n      <td>2009</td>\n      <td>74134167.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2538</th>\n      <td>USA</td>\n      <td>under18</td>\n      <td>2010</td>\n      <td>74119556.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2539</th>\n      <td>USA</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>309326295.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2540</th>\n      <td>USA</td>\n      <td>under18</td>\n      <td>2011</td>\n      <td>73902222.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2541</th>\n      <td>USA</td>\n      <td>total</td>\n      <td>2011</td>\n      <td>311582564.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2542</th>\n      <td>USA</td>\n      <td>under18</td>\n      <td>2012</td>\n      <td>73708179.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2543</th>\n      <td>USA</td>\n      <td>total</td>\n      <td>2012</td>\n      <td>313873685.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n<h3 id=\"查看存在缺失数据的列。\"><a href=\"#查看存在缺失数据的列。\" class=\"headerlink\" title=\"查看存在缺失数据的列。\"></a>查看存在缺失数据的列。</h3><p>使用.isnull().any()，只有某一列存在一个缺失数据，就会显示True。</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">temp.isnull().any()</code></pre>\n\n\n\n\n<pre><code>state/region    False\nages            False\nyear            False\npopulation       True\nstate            True\nabbreviation     True\ndtype: bool\n</code></pre>\n<h3 id=\"根据数据是否缺失情况显示数据，如果缺失为True，那么显示\"><a href=\"#根据数据是否缺失情况显示数据，如果缺失为True，那么显示\" class=\"headerlink\" title=\"根据数据是否缺失情况显示数据，如果缺失为True，那么显示\"></a>根据数据是否缺失情况显示数据，如果缺失为True，那么显示</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">temp.loc[temp.isnull().any(axis&#x3D;1)]</code></pre>\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th &#123;\n    vertical-align: top;\n&#125;\n\n.dataframe thead th &#123;\n    text-align: right;\n&#125;\n</code></pre>\n<p></style></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>state/region</th>\n      <th>ages</th>\n      <th>year</th>\n      <th>population</th>\n      <th>state</th>\n      <th>abbreviation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2448</th>\n      <td>PR</td>\n      <td>under18</td>\n      <td>1990</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2449</th>\n      <td>PR</td>\n      <td>total</td>\n      <td>1990</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2450</th>\n      <td>PR</td>\n      <td>total</td>\n      <td>1991</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2451</th>\n      <td>PR</td>\n      <td>under18</td>\n      <td>1991</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2452</th>\n      <td>PR</td>\n      <td>total</td>\n      <td>1993</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2539</th>\n      <td>USA</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>309326295.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2540</th>\n      <td>USA</td>\n      <td>under18</td>\n      <td>2011</td>\n      <td>73902222.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2541</th>\n      <td>USA</td>\n      <td>total</td>\n      <td>2011</td>\n      <td>311582564.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2542</th>\n      <td>USA</td>\n      <td>under18</td>\n      <td>2012</td>\n      <td>73708179.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n    <tr>\n      <th>2543</th>\n      <td>USA</td>\n      <td>total</td>\n      <td>2012</td>\n      <td>313873685.0</td>\n      <td>NaN</td>\n      <td>NaN</td>\n    </tr>\n  </tbody>\n</table>\n<p>96 rows × 6 columns</p>\n</div>\n\n\n\n<h3 id=\"找到有哪些state-region使得state的值为NaN，使用unique-查看非重复值\"><a href=\"#找到有哪些state-region使得state的值为NaN，使用unique-查看非重复值\" class=\"headerlink\" title=\"找到有哪些state&#x2F;region使得state的值为NaN，使用unique()查看非重复值\"></a>找到有哪些state&#x2F;region使得state的值为NaN，使用unique()查看非重复值</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">temp.loc[temp.isnull().any(axis&#x3D;1), &#39;state&#x2F;region&#39;].unique()</code></pre>\n\n\n\n\n<pre><code>array([&#39;PR&#39;, &#39;USA&#39;], dtype=object)\n</code></pre>\n<h3 id=\"为找到的这些state-region的state项补上正确的值，从而去除掉state这一列的所有NaN！\"><a href=\"#为找到的这些state-region的state项补上正确的值，从而去除掉state这一列的所有NaN！\" class=\"headerlink\" title=\"为找到的这些state&#x2F;region的state项补上正确的值，从而去除掉state这一列的所有NaN！\"></a>为找到的这些state&#x2F;region的state项补上正确的值，从而去除掉state这一列的所有NaN！</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">temp.head()</code></pre>\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th &#123;\n    vertical-align: top;\n&#125;\n\n.dataframe thead th &#123;\n    text-align: right;\n&#125;\n</code></pre>\n<p></style></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>state/region</th>\n      <th>ages</th>\n      <th>year</th>\n      <th>population</th>\n      <th>state</th>\n      <th>abbreviation</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>AL</td>\n      <td>under18</td>\n      <td>2012</td>\n      <td>1117489.0</td>\n      <td>Alabama</td>\n      <td>AL</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>AL</td>\n      <td>total</td>\n      <td>2012</td>\n      <td>4817528.0</td>\n      <td>Alabama</td>\n      <td>AL</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>AL</td>\n      <td>under18</td>\n      <td>2010</td>\n      <td>1130966.0</td>\n      <td>Alabama</td>\n      <td>AL</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>AL</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>4785570.0</td>\n      <td>Alabama</td>\n      <td>AL</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>AL</td>\n      <td>under18</td>\n      <td>2011</td>\n      <td>1125763.0</td>\n      <td>Alabama</td>\n      <td>AL</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n<p>经过分析，只有PR和USA对应的state有空值，所以只需要填写这两组数据即可</p>\n<p>USA  –&gt;  USA<br>PR  –&gt; </p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">areas.head()</code></pre>\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th &#123;\n    vertical-align: top;\n&#125;\n\n.dataframe thead th &#123;\n    text-align: right;\n&#125;\n</code></pre>\n<p></style></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>state</th>\n      <th>area (sq. mi)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Alabama</td>\n      <td>52423</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Alaska</td>\n      <td>656425</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Arizona</td>\n      <td>114006</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Arkansas</td>\n      <td>53182</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>California</td>\n      <td>163707</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 面积表中存在PR州对应的全称 Puerto Rico\n# 简写和全称对应不上关系的时候的处理逻辑？？  业务方确认\nset(areas[&#39;state&#39;]) - set(abb[&#39;state&#39;])</code></pre>\n\n\n\n\n<pre><code>&#123;&#39;Puerto Rico&#39;&#125;\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">temp.loc[temp[&#39;state&#x2F;region&#39;] &#x3D;&#x3D; &#39;PR&#39;, &#39;state&#39;] &#x3D; &#39;Puerto Rico&#39;</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 间接访问不可取  可以读， 不可以写。 写成功也不行\n# temp.loc[temp[&#39;state&#x2F;region&#39;] &#x3D;&#x3D; &#39;PR&#39;][&#39;state&#39;] &#x3D; &#39;PPP&#39;</code></pre>\n\n<pre><code>C:\\Users\\Dancer\\Anaconda3\\lib\\site-packages\\ipykernel_launcher.py:1: SettingWithCopyWarning: \nA value is trying to be set on a copy of a slice from a DataFrame.\nTry using .loc[row_indexer,col_indexer] = value instead\n\nSee the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n  &quot;&quot;&quot;Entry point for launching an IPython kernel.\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 查看使得state为空的州还有哪些\ntemp.loc[temp[&#39;state&#39;].isnull(), &#39;state&#x2F;region&#39;].unique()</code></pre>\n\n\n\n\n<pre><code>array([&#39;USA&#39;], dtype=object)\n</code></pre>\n<h3 id=\"合并各州面积数据areas，使用左合并。\"><a href=\"#合并各州面积数据areas，使用左合并。\" class=\"headerlink\" title=\"合并各州面积数据areas，使用左合并。\"></a>合并各州面积数据areas，使用左合并。</h3><p>思考一下为什么使用外合并？</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 由于USA是全美国的数据，不需要保留，可以删除\n# 把sate&#x2F;region &#x3D;&#x3D; USA的数据删除\n\nusa_index &#x3D; temp.loc[temp[&#39;state&#x2F;region&#39;] &#x3D;&#x3D; &#39;USA&#39;].index\npop_abb &#x3D; temp.drop(labels&#x3D;usa_index).copy()</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">pop_abb.isnull().any()</code></pre>\n\n\n\n\n<pre><code>state/region    False\nages            False\nyear            False\npopulation       True\nstate           False\nabbreviation     True\ndtype: bool\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">pop_abb &#x3D; pop_abb.drop(labels&#x3D;[&#39;abbreviation&#39;], axis&#x3D;1)</code></pre>\n\n<h3 id=\"继续寻找存在缺失数据的列\"><a href=\"#继续寻找存在缺失数据的列\" class=\"headerlink\" title=\"继续寻找存在缺失数据的列\"></a>继续寻找存在缺失数据的列</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 由于2000年之前，并没有统计过PR州的人口数据，所以删除\npop_abb.loc[pop_abb.population.isnull()]</code></pre>\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th &#123;\n    vertical-align: top;\n&#125;\n\n.dataframe thead th &#123;\n    text-align: right;\n&#125;\n</code></pre>\n<p></style></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>state/region</th>\n      <th>ages</th>\n      <th>year</th>\n      <th>population</th>\n      <th>state</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2448</th>\n      <td>PR</td>\n      <td>under18</td>\n      <td>1990</td>\n      <td>NaN</td>\n      <td>Puerto Rico</td>\n    </tr>\n    <tr>\n      <th>2449</th>\n      <td>PR</td>\n      <td>total</td>\n      <td>1990</td>\n      <td>NaN</td>\n      <td>Puerto Rico</td>\n    </tr>\n    <tr>\n      <th>2450</th>\n      <td>PR</td>\n      <td>total</td>\n      <td>1991</td>\n      <td>NaN</td>\n      <td>Puerto Rico</td>\n    </tr>\n    <tr>\n      <th>2451</th>\n      <td>PR</td>\n      <td>under18</td>\n      <td>1991</td>\n      <td>NaN</td>\n      <td>Puerto Rico</td>\n    </tr>\n    <tr>\n      <th>2452</th>\n      <td>PR</td>\n      <td>total</td>\n      <td>1993</td>\n      <td>NaN</td>\n      <td>Puerto Rico</td>\n    </tr>\n    <tr>\n      <th>2453</th>\n      <td>PR</td>\n      <td>under18</td>\n      <td>1993</td>\n      <td>NaN</td>\n      <td>Puerto Rico</td>\n    </tr>\n    <tr>\n      <th>2454</th>\n      <td>PR</td>\n      <td>under18</td>\n      <td>1992</td>\n      <td>NaN</td>\n      <td>Puerto Rico</td>\n    </tr>\n    <tr>\n      <th>2455</th>\n      <td>PR</td>\n      <td>total</td>\n      <td>1992</td>\n      <td>NaN</td>\n      <td>Puerto Rico</td>\n    </tr>\n    <tr>\n      <th>2456</th>\n      <td>PR</td>\n      <td>under18</td>\n      <td>1994</td>\n      <td>NaN</td>\n      <td>Puerto Rico</td>\n    </tr>\n    <tr>\n      <th>2457</th>\n      <td>PR</td>\n      <td>total</td>\n      <td>1994</td>\n      <td>NaN</td>\n      <td>Puerto Rico</td>\n    </tr>\n    <tr>\n      <th>2458</th>\n      <td>PR</td>\n      <td>total</td>\n      <td>1995</td>\n      <td>NaN</td>\n      <td>Puerto Rico</td>\n    </tr>\n    <tr>\n      <th>2459</th>\n      <td>PR</td>\n      <td>under18</td>\n      <td>1995</td>\n      <td>NaN</td>\n      <td>Puerto Rico</td>\n    </tr>\n    <tr>\n      <th>2460</th>\n      <td>PR</td>\n      <td>under18</td>\n      <td>1996</td>\n      <td>NaN</td>\n      <td>Puerto Rico</td>\n    </tr>\n    <tr>\n      <th>2461</th>\n      <td>PR</td>\n      <td>total</td>\n      <td>1996</td>\n      <td>NaN</td>\n      <td>Puerto Rico</td>\n    </tr>\n    <tr>\n      <th>2462</th>\n      <td>PR</td>\n      <td>under18</td>\n      <td>1998</td>\n      <td>NaN</td>\n      <td>Puerto Rico</td>\n    </tr>\n    <tr>\n      <th>2463</th>\n      <td>PR</td>\n      <td>total</td>\n      <td>1998</td>\n      <td>NaN</td>\n      <td>Puerto Rico</td>\n    </tr>\n    <tr>\n      <th>2464</th>\n      <td>PR</td>\n      <td>total</td>\n      <td>1997</td>\n      <td>NaN</td>\n      <td>Puerto Rico</td>\n    </tr>\n    <tr>\n      <th>2465</th>\n      <td>PR</td>\n      <td>under18</td>\n      <td>1997</td>\n      <td>NaN</td>\n      <td>Puerto Rico</td>\n    </tr>\n    <tr>\n      <th>2466</th>\n      <td>PR</td>\n      <td>total</td>\n      <td>1999</td>\n      <td>NaN</td>\n      <td>Puerto Rico</td>\n    </tr>\n    <tr>\n      <th>2467</th>\n      <td>PR</td>\n      <td>under18</td>\n      <td>1999</td>\n      <td>NaN</td>\n      <td>Puerto Rico</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">pop_abb.isnull().any()</code></pre>\n\n\n\n\n<pre><code>state/region    False\nages            False\nyear            False\npopulation       True\nstate           False\ndtype: bool\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">pop_abb.dropna().isnull().any()</code></pre>\n\n\n\n\n<pre><code>state/region    False\nages            False\nyear            False\npopulation      False\nstate           False\ndtype: bool\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 删除人口为空的所有行\npop_abb.dropna(inplace&#x3D;True)</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">pop_abb.head()</code></pre>\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th &#123;\n    vertical-align: top;\n&#125;\n\n.dataframe thead th &#123;\n    text-align: right;\n&#125;\n</code></pre>\n<p></style></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>state/region</th>\n      <th>ages</th>\n      <th>year</th>\n      <th>population</th>\n      <th>state</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>AL</td>\n      <td>under18</td>\n      <td>2012</td>\n      <td>1117489.0</td>\n      <td>Alabama</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>AL</td>\n      <td>total</td>\n      <td>2012</td>\n      <td>4817528.0</td>\n      <td>Alabama</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>AL</td>\n      <td>under18</td>\n      <td>2010</td>\n      <td>1130966.0</td>\n      <td>Alabama</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>AL</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>4785570.0</td>\n      <td>Alabama</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>AL</td>\n      <td>under18</td>\n      <td>2011</td>\n      <td>1125763.0</td>\n      <td>Alabama</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">areas.head()</code></pre>\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th &#123;\n    vertical-align: top;\n&#125;\n\n.dataframe thead th &#123;\n    text-align: right;\n&#125;\n</code></pre>\n<p></style></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>state</th>\n      <th>area (sq. mi)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Alabama</td>\n      <td>52423</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Alaska</td>\n      <td>656425</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Arizona</td>\n      <td>114006</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Arkansas</td>\n      <td>53182</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>California</td>\n      <td>163707</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"># 使用外合并，保证数据的完整\ntotal &#x3D; pd.merge(left&#x3D;pop_abb, right&#x3D;areas, how&#x3D;&#39;outer&#39;)</code></pre>\n\n<h3 id=\"我们会发现area-sq-mi-这一列有缺失数据，为了找出是哪一行，我们需要找出是哪个state没有数据\"><a href=\"#我们会发现area-sq-mi-这一列有缺失数据，为了找出是哪一行，我们需要找出是哪个state没有数据\" class=\"headerlink\" title=\"我们会发现area(sq.mi)这一列有缺失数据，为了找出是哪一行，我们需要找出是哪个state没有数据\"></a>我们会发现area(sq.mi)这一列有缺失数据，为了找出是哪一行，我们需要找出是哪个state没有数据</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">total.isnull().any()</code></pre>\n\n\n\n\n<pre><code>state/region     False\nages             False\nyear             False\npopulation       False\nstate            False\narea (sq. mi)    False\ndtype: bool\n</code></pre>\n<h3 id=\"去除含有缺失数据的行\"><a href=\"#去除含有缺失数据的行\" class=\"headerlink\" title=\"去除含有缺失数据的行\"></a>去除含有缺失数据的行</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"></code></pre>\n\n<h3 id=\"找出2010年的全民人口数据-df-query-查询语句\"><a href=\"#找出2010年的全民人口数据-df-query-查询语句\" class=\"headerlink\" title=\"找出2010年的全民人口数据,df.query(查询语句)\"></a>找出2010年的全民人口数据,df.query(查询语句)</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">pop_2010_total &#x3D; total.query(&#39;year &#x3D;&#x3D; 2010 &amp; ages &#x3D;&#x3D; &quot;total&quot;&#39;)</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">pop_abb.info()</code></pre>\n\n<pre><code>&lt;class &#39;pandas.core.frame.DataFrame&#39;&gt;\nInt64Index: 2476 entries, 0 to 2495\nData columns (total 5 columns):\nstate/region    2476 non-null object\nages            2476 non-null object\nyear            2476 non-null int64\npopulation      2476 non-null float64\nstate           2476 non-null object\ndtypes: float64(1), int64(1), object(3)\nmemory usage: 116.1+ KB\n</code></pre>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">con1 &#x3D; total.year &#x3D;&#x3D; 2010\ncon2 &#x3D; total.ages &#x3D;&#x3D; &#39;total&#39;</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">total.loc[con1 &amp; con2]</code></pre>\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th &#123;\n    vertical-align: top;\n&#125;\n\n.dataframe thead th &#123;\n    text-align: right;\n&#125;\n</code></pre>\n<p></style></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>state/region</th>\n      <th>ages</th>\n      <th>year</th>\n      <th>population</th>\n      <th>state</th>\n      <th>area (sq. mi)</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>3</th>\n      <td>AL</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>4785570.0</td>\n      <td>Alabama</td>\n      <td>52423</td>\n    </tr>\n    <tr>\n      <th>91</th>\n      <td>AK</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>713868.0</td>\n      <td>Alaska</td>\n      <td>656425</td>\n    </tr>\n    <tr>\n      <th>101</th>\n      <td>AZ</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>6408790.0</td>\n      <td>Arizona</td>\n      <td>114006</td>\n    </tr>\n    <tr>\n      <th>189</th>\n      <td>AR</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>2922280.0</td>\n      <td>Arkansas</td>\n      <td>53182</td>\n    </tr>\n    <tr>\n      <th>197</th>\n      <td>CA</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>37333601.0</td>\n      <td>California</td>\n      <td>163707</td>\n    </tr>\n    <tr>\n      <th>283</th>\n      <td>CO</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>5048196.0</td>\n      <td>Colorado</td>\n      <td>104100</td>\n    </tr>\n    <tr>\n      <th>293</th>\n      <td>CT</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>3579210.0</td>\n      <td>Connecticut</td>\n      <td>5544</td>\n    </tr>\n    <tr>\n      <th>379</th>\n      <td>DE</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>899711.0</td>\n      <td>Delaware</td>\n      <td>1954</td>\n    </tr>\n    <tr>\n      <th>389</th>\n      <td>DC</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>605125.0</td>\n      <td>District of Columbia</td>\n      <td>68</td>\n    </tr>\n    <tr>\n      <th>475</th>\n      <td>FL</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>18846054.0</td>\n      <td>Florida</td>\n      <td>65758</td>\n    </tr>\n    <tr>\n      <th>485</th>\n      <td>GA</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>9713248.0</td>\n      <td>Georgia</td>\n      <td>59441</td>\n    </tr>\n    <tr>\n      <th>570</th>\n      <td>HI</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>1363731.0</td>\n      <td>Hawaii</td>\n      <td>10932</td>\n    </tr>\n    <tr>\n      <th>581</th>\n      <td>ID</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>1570718.0</td>\n      <td>Idaho</td>\n      <td>83574</td>\n    </tr>\n    <tr>\n      <th>666</th>\n      <td>IL</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>12839695.0</td>\n      <td>Illinois</td>\n      <td>57918</td>\n    </tr>\n    <tr>\n      <th>677</th>\n      <td>IN</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>6489965.0</td>\n      <td>Indiana</td>\n      <td>36420</td>\n    </tr>\n    <tr>\n      <th>762</th>\n      <td>IA</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>3050314.0</td>\n      <td>Iowa</td>\n      <td>56276</td>\n    </tr>\n    <tr>\n      <th>773</th>\n      <td>KS</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>2858910.0</td>\n      <td>Kansas</td>\n      <td>82282</td>\n    </tr>\n    <tr>\n      <th>858</th>\n      <td>KY</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>4347698.0</td>\n      <td>Kentucky</td>\n      <td>40411</td>\n    </tr>\n    <tr>\n      <th>869</th>\n      <td>LA</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>4545392.0</td>\n      <td>Louisiana</td>\n      <td>51843</td>\n    </tr>\n    <tr>\n      <th>954</th>\n      <td>ME</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>1327366.0</td>\n      <td>Maine</td>\n      <td>35387</td>\n    </tr>\n    <tr>\n      <th>965</th>\n      <td>MD</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>5787193.0</td>\n      <td>Maryland</td>\n      <td>12407</td>\n    </tr>\n    <tr>\n      <th>1050</th>\n      <td>MA</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>6563263.0</td>\n      <td>Massachusetts</td>\n      <td>10555</td>\n    </tr>\n    <tr>\n      <th>1061</th>\n      <td>MI</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>9876149.0</td>\n      <td>Michigan</td>\n      <td>96810</td>\n    </tr>\n    <tr>\n      <th>1146</th>\n      <td>MN</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>5310337.0</td>\n      <td>Minnesota</td>\n      <td>86943</td>\n    </tr>\n    <tr>\n      <th>1157</th>\n      <td>MS</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>2970047.0</td>\n      <td>Mississippi</td>\n      <td>48434</td>\n    </tr>\n    <tr>\n      <th>1242</th>\n      <td>MO</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>5996063.0</td>\n      <td>Missouri</td>\n      <td>69709</td>\n    </tr>\n    <tr>\n      <th>1253</th>\n      <td>MT</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>990527.0</td>\n      <td>Montana</td>\n      <td>147046</td>\n    </tr>\n    <tr>\n      <th>1338</th>\n      <td>NE</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>1829838.0</td>\n      <td>Nebraska</td>\n      <td>77358</td>\n    </tr>\n    <tr>\n      <th>1349</th>\n      <td>NV</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>2703230.0</td>\n      <td>Nevada</td>\n      <td>110567</td>\n    </tr>\n    <tr>\n      <th>1434</th>\n      <td>NH</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>1316614.0</td>\n      <td>New Hampshire</td>\n      <td>9351</td>\n    </tr>\n    <tr>\n      <th>1445</th>\n      <td>NJ</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>8802707.0</td>\n      <td>New Jersey</td>\n      <td>8722</td>\n    </tr>\n    <tr>\n      <th>1530</th>\n      <td>NM</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>2064982.0</td>\n      <td>New Mexico</td>\n      <td>121593</td>\n    </tr>\n    <tr>\n      <th>1541</th>\n      <td>NY</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>19398228.0</td>\n      <td>New York</td>\n      <td>54475</td>\n    </tr>\n    <tr>\n      <th>1626</th>\n      <td>NC</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>9559533.0</td>\n      <td>North Carolina</td>\n      <td>53821</td>\n    </tr>\n    <tr>\n      <th>1637</th>\n      <td>ND</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>674344.0</td>\n      <td>North Dakota</td>\n      <td>70704</td>\n    </tr>\n    <tr>\n      <th>1722</th>\n      <td>OH</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>11545435.0</td>\n      <td>Ohio</td>\n      <td>44828</td>\n    </tr>\n    <tr>\n      <th>1733</th>\n      <td>OK</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>3759263.0</td>\n      <td>Oklahoma</td>\n      <td>69903</td>\n    </tr>\n    <tr>\n      <th>1818</th>\n      <td>OR</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>3837208.0</td>\n      <td>Oregon</td>\n      <td>98386</td>\n    </tr>\n    <tr>\n      <th>1829</th>\n      <td>PA</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>12710472.0</td>\n      <td>Pennsylvania</td>\n      <td>46058</td>\n    </tr>\n    <tr>\n      <th>1914</th>\n      <td>RI</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>1052669.0</td>\n      <td>Rhode Island</td>\n      <td>1545</td>\n    </tr>\n    <tr>\n      <th>1925</th>\n      <td>SC</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>4636361.0</td>\n      <td>South Carolina</td>\n      <td>32007</td>\n    </tr>\n    <tr>\n      <th>2010</th>\n      <td>SD</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>816211.0</td>\n      <td>South Dakota</td>\n      <td>77121</td>\n    </tr>\n    <tr>\n      <th>2021</th>\n      <td>TN</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>6356683.0</td>\n      <td>Tennessee</td>\n      <td>42146</td>\n    </tr>\n    <tr>\n      <th>2106</th>\n      <td>TX</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>25245178.0</td>\n      <td>Texas</td>\n      <td>268601</td>\n    </tr>\n    <tr>\n      <th>2117</th>\n      <td>UT</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>2774424.0</td>\n      <td>Utah</td>\n      <td>84904</td>\n    </tr>\n    <tr>\n      <th>2202</th>\n      <td>VT</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>625793.0</td>\n      <td>Vermont</td>\n      <td>9615</td>\n    </tr>\n    <tr>\n      <th>2213</th>\n      <td>VA</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>8024417.0</td>\n      <td>Virginia</td>\n      <td>42769</td>\n    </tr>\n    <tr>\n      <th>2298</th>\n      <td>WA</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>6742256.0</td>\n      <td>Washington</td>\n      <td>71303</td>\n    </tr>\n    <tr>\n      <th>2309</th>\n      <td>WV</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>1854146.0</td>\n      <td>West Virginia</td>\n      <td>24231</td>\n    </tr>\n    <tr>\n      <th>2394</th>\n      <td>WI</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>5689060.0</td>\n      <td>Wisconsin</td>\n      <td>65503</td>\n    </tr>\n    <tr>\n      <th>2405</th>\n      <td>WY</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>564222.0</td>\n      <td>Wyoming</td>\n      <td>97818</td>\n    </tr>\n    <tr>\n      <th>2470</th>\n      <td>PR</td>\n      <td>total</td>\n      <td>2010</td>\n      <td>3721208.0</td>\n      <td>Puerto Rico</td>\n      <td>3515</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n<h3 id=\"对查询结果进行处理，以state列作为新的行索引-set-index\"><a href=\"#对查询结果进行处理，以state列作为新的行索引-set-index\" class=\"headerlink\" title=\"对查询结果进行处理，以state列作为新的行索引:set_index\"></a>对查询结果进行处理，以state列作为新的行索引:set_index</h3><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">total[&#39;density&#39;] &#x3D; total[&#39;population&#39;]&#x2F;total[&#39;area (sq. mi)&#39;]</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">density_df &#x3D; total.query(&#39;year &#x3D;&#x3D; 2012 &amp; ages &#x3D;&#x3D; &quot;total&quot;&#39;).sort_values(&#39;density&#39;, ascending&#x3D;False)</code></pre>\n\n\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">density_df.set_index(&#39;state&#39;).head()</code></pre>\n\n\n\n\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n<pre><code>.dataframe tbody tr th &#123;\n    vertical-align: top;\n&#125;\n\n.dataframe thead th &#123;\n    text-align: right;\n&#125;\n</code></pre>\n<p></style></p>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>state/region</th>\n      <th>ages</th>\n      <th>year</th>\n      <th>population</th>\n      <th>area (sq. mi)</th>\n      <th>density</th>\n    </tr>\n    <tr>\n      <th>state</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>District of Columbia</th>\n      <td>DC</td>\n      <td>total</td>\n      <td>2012</td>\n      <td>633427.0</td>\n      <td>68</td>\n      <td>9315.102941</td>\n    </tr>\n    <tr>\n      <th>Puerto Rico</th>\n      <td>PR</td>\n      <td>total</td>\n      <td>2012</td>\n      <td>3651545.0</td>\n      <td>3515</td>\n      <td>1038.846373</td>\n    </tr>\n    <tr>\n      <th>New Jersey</th>\n      <td>NJ</td>\n      <td>total</td>\n      <td>2012</td>\n      <td>8867749.0</td>\n      <td>8722</td>\n      <td>1016.710502</td>\n    </tr>\n    <tr>\n      <th>Rhode Island</th>\n      <td>RI</td>\n      <td>total</td>\n      <td>2012</td>\n      <td>1050304.0</td>\n      <td>1545</td>\n      <td>679.808414</td>\n    </tr>\n    <tr>\n      <th>Connecticut</th>\n      <td>CT</td>\n      <td>total</td>\n      <td>2012</td>\n      <td>3591765.0</td>\n      <td>5544</td>\n      <td>647.865260</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n\n\n\n<h3 id=\"计算人口密度。注意是Series-Series，其结果还是一个Series。\"><a href=\"#计算人口密度。注意是Series-Series，其结果还是一个Series。\" class=\"headerlink\" title=\"计算人口密度。注意是Series&#x2F;Series，其结果还是一个Series。\"></a>计算人口密度。注意是Series&#x2F;Series，其结果还是一个Series。</h3><h3 id=\"排序，并找出人口密度最高的五个州sort-values\"><a href=\"#排序，并找出人口密度最高的五个州sort-values\" class=\"headerlink\" title=\"排序，并找出人口密度最高的五个州sort_values()\"></a>排序，并找出人口密度最高的五个州sort_values()</h3>","text":"美国各州人口密度分析import numpy as np import pandas as pd 首先导入文件，并查看数据样本# 州的全称和州名称简写对应关系表...","link":"","photos":[],"count_time":{"symbolsCount":"27k","symbolsTime":"24 mins."},"categories":[],"tags":[{"name":"pandas","slug":"pandas","count":3,"path":"api/tags/pandas.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BE%8E%E5%9B%BD%E5%90%84%E5%B7%9E%E4%BA%BA%E5%8F%A3%E5%AF%86%E5%BA%A6%E5%88%86%E6%9E%90\"><span class=\"toc-text\">美国各州人口密度分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%A6%96%E5%85%88%E5%AF%BC%E5%85%A5%E6%96%87%E4%BB%B6%EF%BC%8C%E5%B9%B6%E6%9F%A5%E7%9C%8B%E6%95%B0%E6%8D%AE%E6%A0%B7%E6%9C%AC\"><span class=\"toc-text\">首先导入文件，并查看数据样本</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%88%E5%B9%B6pop%E4%B8%8Eabbrevs%E4%B8%A4%E4%B8%AADataFrame%EF%BC%8C%E5%88%86%E5%88%AB%E4%BE%9D%E6%8D%AEstate-region%E5%88%97%E5%92%8Cabbreviation%E5%88%97%E6%9D%A5%E5%90%88%E5%B9%B6%E3%80%82\"><span class=\"toc-text\">合并pop与abbrevs两个DataFrame，分别依据state&#x2F;region列和abbreviation列来合并。</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E5%AD%98%E5%9C%A8%E7%BC%BA%E5%A4%B1%E6%95%B0%E6%8D%AE%E7%9A%84%E5%88%97%E3%80%82\"><span class=\"toc-text\">查看存在缺失数据的列。</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%B9%E6%8D%AE%E6%95%B0%E6%8D%AE%E6%98%AF%E5%90%A6%E7%BC%BA%E5%A4%B1%E6%83%85%E5%86%B5%E6%98%BE%E7%A4%BA%E6%95%B0%E6%8D%AE%EF%BC%8C%E5%A6%82%E6%9E%9C%E7%BC%BA%E5%A4%B1%E4%B8%BATrue%EF%BC%8C%E9%82%A3%E4%B9%88%E6%98%BE%E7%A4%BA\"><span class=\"toc-text\">根据数据是否缺失情况显示数据，如果缺失为True，那么显示</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%BE%E5%88%B0%E6%9C%89%E5%93%AA%E4%BA%9Bstate-region%E4%BD%BF%E5%BE%97state%E7%9A%84%E5%80%BC%E4%B8%BANaN%EF%BC%8C%E4%BD%BF%E7%94%A8unique-%E6%9F%A5%E7%9C%8B%E9%9D%9E%E9%87%8D%E5%A4%8D%E5%80%BC\"><span class=\"toc-text\">找到有哪些state&#x2F;region使得state的值为NaN，使用unique()查看非重复值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E6%89%BE%E5%88%B0%E7%9A%84%E8%BF%99%E4%BA%9Bstate-region%E7%9A%84state%E9%A1%B9%E8%A1%A5%E4%B8%8A%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%80%BC%EF%BC%8C%E4%BB%8E%E8%80%8C%E5%8E%BB%E9%99%A4%E6%8E%89state%E8%BF%99%E4%B8%80%E5%88%97%E7%9A%84%E6%89%80%E6%9C%89NaN%EF%BC%81\"><span class=\"toc-text\">为找到的这些state&#x2F;region的state项补上正确的值，从而去除掉state这一列的所有NaN！</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%90%88%E5%B9%B6%E5%90%84%E5%B7%9E%E9%9D%A2%E7%A7%AF%E6%95%B0%E6%8D%AEareas%EF%BC%8C%E4%BD%BF%E7%94%A8%E5%B7%A6%E5%90%88%E5%B9%B6%E3%80%82\"><span class=\"toc-text\">合并各州面积数据areas，使用左合并。</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BB%A7%E7%BB%AD%E5%AF%BB%E6%89%BE%E5%AD%98%E5%9C%A8%E7%BC%BA%E5%A4%B1%E6%95%B0%E6%8D%AE%E7%9A%84%E5%88%97\"><span class=\"toc-text\">继续寻找存在缺失数据的列</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%88%91%E4%BB%AC%E4%BC%9A%E5%8F%91%E7%8E%B0area-sq-mi-%E8%BF%99%E4%B8%80%E5%88%97%E6%9C%89%E7%BC%BA%E5%A4%B1%E6%95%B0%E6%8D%AE%EF%BC%8C%E4%B8%BA%E4%BA%86%E6%89%BE%E5%87%BA%E6%98%AF%E5%93%AA%E4%B8%80%E8%A1%8C%EF%BC%8C%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E6%89%BE%E5%87%BA%E6%98%AF%E5%93%AA%E4%B8%AAstate%E6%B2%A1%E6%9C%89%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">我们会发现area(sq.mi)这一列有缺失数据，为了找出是哪一行，我们需要找出是哪个state没有数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%BB%E9%99%A4%E5%90%AB%E6%9C%89%E7%BC%BA%E5%A4%B1%E6%95%B0%E6%8D%AE%E7%9A%84%E8%A1%8C\"><span class=\"toc-text\">去除含有缺失数据的行</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%89%BE%E5%87%BA2010%E5%B9%B4%E7%9A%84%E5%85%A8%E6%B0%91%E4%BA%BA%E5%8F%A3%E6%95%B0%E6%8D%AE-df-query-%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">找出2010年的全民人口数据,df.query(查询语句)</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E6%9F%A5%E8%AF%A2%E7%BB%93%E6%9E%9C%E8%BF%9B%E8%A1%8C%E5%A4%84%E7%90%86%EF%BC%8C%E4%BB%A5state%E5%88%97%E4%BD%9C%E4%B8%BA%E6%96%B0%E7%9A%84%E8%A1%8C%E7%B4%A2%E5%BC%95-set-index\"><span class=\"toc-text\">对查询结果进行处理，以state列作为新的行索引:set_index</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E7%AE%97%E4%BA%BA%E5%8F%A3%E5%AF%86%E5%BA%A6%E3%80%82%E6%B3%A8%E6%84%8F%E6%98%AFSeries-Series%EF%BC%8C%E5%85%B6%E7%BB%93%E6%9E%9C%E8%BF%98%E6%98%AF%E4%B8%80%E4%B8%AASeries%E3%80%82\"><span class=\"toc-text\">计算人口密度。注意是Series&#x2F;Series，其结果还是一个Series。</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%92%E5%BA%8F%EF%BC%8C%E5%B9%B6%E6%89%BE%E5%87%BA%E4%BA%BA%E5%8F%A3%E5%AF%86%E5%BA%A6%E6%9C%80%E9%AB%98%E7%9A%84%E4%BA%94%E4%B8%AA%E5%B7%9Esort-values\"><span class=\"toc-text\">排序，并找出人口密度最高的五个州sort_values()</span></a></li></ol></li></ol></li></ol>","author":{"name":"verfotta","slug":"blog-author","avatar":"/icons/favicon-32x32.png","link":"/","description":"您好","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"hidden":false,"prev_post":{"title":"餐饮店选址分析","uid":"8e5e6bd4de7184f13b84872bd28754d4","slug":"TBproject","date":"2023-09-09T04:17:53.000Z","updated":"2023-09-14T13:10:45.146Z","comments":true,"path":"api/articles/TBproject.json","keywords":null,"cover":[],"text":"上海餐饮店选址分析地区人流量占比 餐饮类别气泡图 地区餐饮店数量 各类型餐饮店数量 类别评分 评分与消费金额关系 热地图 故事 结合这张图可以看出，点评人数几乎...","link":"","photos":[],"count_time":{"symbolsCount":97,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"tableau","slug":"tableau","count":1,"path":"api/tags/tableau.json"}],"author":{"name":"verfotta","slug":"blog-author","avatar":"/icons/favicon-32x32.png","link":"/","description":"您好","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"用户消费分析","uid":"3d9d038cb0872dd03dea32d865f59a41","slug":"用户消费","date":"2023-09-09T04:17:53.000Z","updated":"2023-09-14T14:07:04.653Z","comments":true,"path":"api/articles/用户消费.json","keywords":null,"cover":[],"text":"用户消费分析import numpy as np import pandas as pd from pandas import DataFrame,Series...","link":"","photos":[],"count_time":{"symbolsCount":"60k","symbolsTime":"54 mins."},"categories":[],"tags":[{"name":"pandas","slug":"pandas","count":3,"path":"api/tags/pandas.json"},{"name":"matplotlib","slug":"matplotlib","count":1,"path":"api/tags/matplotlib.json"}],"author":{"name":"verfotta","slug":"blog-author","avatar":"/icons/favicon-32x32.png","link":"/","description":"您好","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}